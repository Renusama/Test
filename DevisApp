package com.mycompany.projetdevis;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.control.TextField;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

public class DevisApp extends Application {
    private BorderPane root;
    private HBox floorsContainer;
    private VBox summaryContainer;
    private double totalDevis;
    private Canvas canvas;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Calcul Devis");

        
     /*   // Conyainer barre en haut 
        HBox floorsContainer = createFloorsContainer();
        root.setTop(floorsContainer);*/
        

        // Barre d'outils Ã  gauche
        VBox toolsContainer = createToolsContainer();
        root.setLeft(toolsContainer);

        // CrÃ©er le Canvas pour afficher la grille et les dessins
        canvas = new Canvas();
        GraphicsContext gc = canvas.getGraphicsContext2D();

        // DÃ©finir la taille du canvas
        double canvasWidth = 800;
        double canvasHeight = 600;
        canvas.setWidth(canvasWidth);
        canvas.setHeight(canvasHeight);

        // Dessiner la grille
        int gridSize = 20; // Taille d'une cellule de la grille
        gc.setStroke(Color.GRAY);

        // Dessiner les lignes verticales
        for (int x = 0; x < canvasWidth; x += gridSize) {
            gc.strokeLine(x, 0, x, canvasHeight);
        }

        // Dessiner les lignes horizontales
        for (int y = 0; y < canvasHeight; y += gridSize) {
            gc.strokeLine(0, y, canvasWidth, y);
        }

        // Ajouter le Canvas au plan central du BorderPane
        root.setCenter(canvas);

        Scene scene = new Scene(root, 800, 600);
        primaryStage.setTitle("Devis Bâtiment");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /* private HBox createFloorsContainer () {
                // CrÃ©ation de la page principale avec les Ã©tages, la somme et la barre d'outils
        root = new BorderPane();
        root.setPadding(new Insets(10));
        root.setBackground(new Background(new BackgroundFill(Color.WHITE, CornerRadii.EMPTY, Insets.EMPTY)));

        // Container pour les Ã©tages
        floorsContainer = new HBox();
        root.setTop(floorsContainer);
        

        // CrÃ©ation du bouton "+"
        Button addButton = new Button("+");
        addButton.setOnAction(e -> {
            Tab tab = new Tab("Nouvel Onglet");
            floorsContainer..add(tab);
        });

        // CrÃ©ation du conteneur pour le bouton
        VBox buttonContainer = new VBox(addButton);
        buttonContainer.setAlignment(Pos.CENTER_RIGHT);
        root.setBottom(buttonContainer);

        // Container pour la somme
        summaryContainer = new VBox(10);
        summaryContainer.setPadding(new Insets(10));
        summaryContainer.setAlignment(Pos.TOP_CENTER);
        root.setRight(summaryContainer);
    }*/
    
    
    
    
    
    private VBox createToolsContainer() {
        VBox toolsContainer = new VBox(10);
        toolsContainer.setPadding(new Insets(10));
        toolsContainer.setAlignment(Pos.TOP_LEFT);

        Button addPointButton = new Button("Ajouter un Coin");
        addPointButton.setOnAction(e -> {
            // CrÃ©er une fenÃªtre de dialogue pour saisir les coordonnÃ©es du point
            Stage dialogStage = new Stage();
            dialogStage.setTitle("Ajouter un point");

            // CrÃ©er les labels et les champs de texte pour les coordonnÃ©es x et y
            Label xLabel = new Label("Coordonnée X :");
            TextField xField = new TextField();

            Label yLabel = new Label("CoordonnéeY :");
            TextField yField = new TextField();

            // CrÃ©er le bouton de validation
            Button saveButton = new Button("Enregistrer");
            saveButton.setOnAction(event -> {
                // RÃ©cupÃ©rer les coordonnÃ©es saisies
                double x = Double.parseDouble(xField.getText());
                double y = Double.parseDouble(yField.getText());

                GraphicsContext gc = canvas.getGraphicsContext2D();

                // CrÃ©er un nouveau Coin avec les coordonnÃ©es saisies
                Coin Coin = new Coin(x, y);

                // Dessiner le Coin sur le canvas
                Coin.dessinerCoin(gc);

                // Fermer la fenÃªtre de dialogue
                dialogStage.close();
            });

            // Ajouter les labels, les champs de texte et le bouton Ã  la fenÃªtre de dialogue
            VBox dialogContent = new VBox(10, xLabel, xField, yLabel, yField, saveButton);
            dialogContent.setAlignment(Pos.CENTER);
            dialogContent.setPadding(new Insets(10));
            dialogStage.setScene(new Scene(dialogContent));
            dialogStage.showAndWait();
        });

        Button drawPiecesButton = new Button("Dessiner une pièce");
        drawPiecesButton.setOnAction(e -> {
            // CrÃ©er une fenÃªtre de dialogue pour saisir les coordonnÃ©es de la piÃ¨ce
            Stage dialogStage = new Stage();
            dialogStage.setTitle("Dessiner une pièce");

            // CrÃ©er les labels et les champs de texte pour les coordonnÃ©es des Coins
            Label x1Label = new Label("Coordonnée X Coin 1 :");
            TextField x1Field = new TextField();

            Label y1Label = new Label("Coordonnée Y Coin 1 :");
            TextField y1Field = new TextField();

            Label x2Label = new Label("Coordonnée X Coin 2 :");
            TextField x2Field = new TextField();

            Label y2Label = new Label("Coordonnée Y Coin 2 :");
            TextField y2Field = new TextField();

            // CrÃ©er le bouton de validation
            Button saveButton = new Button("OK");
            saveButton.setOnAction(event -> {
                // RÃ©cupÃ©rer les coordonnÃ©es saisies
                double x1 = Double.parseDouble(x1Field.getText());
                double y1 = Double.parseDouble(y1Field.getText());
                double x2 = Double.parseDouble(x2Field.getText());
                double y2 = Double.parseDouble(y2Field.getText());

                // CrÃ©er les Coins avec les coordonnÃ©es saisies
                Coin Coin1 = new Coin(x1, y1);
                Coin Coin2 = new Coin(x2, y2);
                Coin Coin3 = new Coin (x1 +(x2 - x1),y1 );
                Coin Coin4 = new Coin (x2, y1 +(y2 - y1) );

                Mur Mur4 = new Mur (Coin1, Coin3, 0, 0);
                Mur Mur1 = new Mur (Coin1, Coin4, 0, 0);       
                Mur Mur2 = new Mur (Coin4, Coin2, 0, 0);        
                Mur Mur3 = new Mur (Coin2, Coin3, 0, 0);
                        
                // CrÃ©er la piÃ¨ce avec les Coins
                Pieces Pieces = new Pieces(Coin1, Coin2);

                // Dessiner la piÃ¨ce sur le canvas
                GraphicsContext gc = canvas.getGraphicsContext2D();
                Pieces.dessiner(gc);

                // Fermer la fenÃªtre de dialogue
                dialogStage.close();
            });

            // Ajouter les labels, les champs de texte et le bouton Ã  la fenÃªtre de dialogue
            VBox dialogContent = new VBox(10, x1Label, x1Field, y1Label, y1Field, x2Label, x2Field, y2Label, y2Field, saveButton);
            dialogContent.setAlignment(Pos.CENTER);
            dialogContent.setPadding(new Insets(10));
            dialogStage.setScene(new Scene(dialogContent));
            dialogStage.showAndWait();
        });

      Button drawWallButton = new Button("Dessiner un mur");
    drawWallButton.setOnAction(e -> {
        // CrÃ©er une fenÃªtre de dialogue pour saisir les coordonnÃ©es du mur
        Stage dialogStage = new Stage();
        dialogStage.setTitle("Dessiner un mur");

        // CrÃ©er les labels et les champs de texte pour les coordonnÃ©es des Coins
        Label x1Label = new Label("Coordonnée X Coin 1 :");
        TextField x1Field = new TextField();

        Label y1Label = new Label("Coordonnée Y Coin 1 :");
        TextField y1Field = new TextField();

        Label x2Label = new Label("Coordonnée X Coin 2 :");
        TextField x2Field = new TextField();

        Label y2Label = new Label("Coordonnée Y Coin 2 :");
        TextField y2Field = new TextField();

        // CrÃ©er le bouton de validation
        Button saveButton = new Button("OK");
        saveButton.setOnAction(event -> {
            // RÃ©cupÃ©rer les coordonnÃ©es saisies
            double x1 = Double.parseDouble(x1Field.getText());
            double y1 = Double.parseDouble(y1Field.getText());
            double x2 = Double.parseDouble(x2Field.getText());
            double y2 = Double.parseDouble(y2Field.getText());

            // CrÃ©er les Coins avec les coordonnÃ©es saisies
            Coin Coin1 = new Coin(x1, y1);
            Coin Coin2 = new Coin(x2, y2);

            // CrÃ©er le mur avec les Coins
            Mur mur = new Mur(Coin1, Coin2, 0, 0);

            // Dessiner le mur sur le canvas
            GraphicsContext gc = canvas.getGraphicsContext2D();
            mur.Dessiner(gc);

            // Fermer la fenÃªtre de dialogue
            dialogStage.close();
        }); 

        // Ajouter les labels, les champs de texte et le bouton Ã  la fenÃªtre de dialogue
        VBox dialogContent = new VBox(10, x1Label, x1Field, y1Label, y1Field, x2Label, x2Field, y2Label, y2Field, saveButton);
        dialogContent.setAlignment(Pos.CENTER);
        dialogContent.setPadding(new Insets(10));
        dialogStage.setScene(new Scene(dialogContent));
        dialogStage.showAndWait();
    });

    toolsContainer.getChildren().addAll(addPointButton, drawPiecesButton, drawWallButton);
    return toolsContainer;
}
    
    
    
}
